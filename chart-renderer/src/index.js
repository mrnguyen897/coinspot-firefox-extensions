const express = require("express")
const { ChartJSNodeCanvas  } = require('chartjs-node-canvas');
let app = express()
const moment = require('moment')
const data =[[1613801100000,6.06603079],[1613801400000,6.07472764],[1613801700000,6.07445457],[1613802000000,6.07282595],[1613802300000,6.10361898],[1613802600000,6.05616177],[1613802900000,6.08895115],[1613803200000,6.06003747],[1613803500000,6.12238248],[1613803800000,6.12753676],[1613804100000,6.09929781],[1613804400000,6.08885758],[1613804700000,6.06395842],[1613805000000,6.06728628],[1613805300000,6.02047384],[1613805600000,6.00600642],[1613805900000,5.98158678],[1613806200000,5.97186594],[1613806500000,5.98250827],[1613806800000,5.97613063],[1613807100000,5.88774742],[1613807400000,5.87187185],[1613807700000,5.87442403],[1613808000000,5.89007242],[1613808300000,5.86337998],[1613808600000,5.95319957],[1613808900000,5.9754718],[1613809200000,6.02634235],[1613809500000,6.03512112],[1613809800000,6.00148346],[1613810100000,6.00842252],[1613810400000,6.0191822],[1613810700000,6.00804847],[1613811000000,5.96697267],[1613811300000,5.99242614],[1613811600000,5.97761467],[1613811900000,5.97818578],[1613812200000,5.98255742],[1613812500000,5.98100506],[1613812800000,6.02523322],[1613813100000,6.04134798],[1613813400000,6.05972294],[1613813700000,6.07179595],[1613814000000,6.04128263],[1613814300000,6.04448384],[1613814600000,6.04233059],[1613814900000,6.03113086],[1613815200000,6.02620296],[1613815500000,6.05662675],[1613815800000,6.07026459],[1613816100000,6.06598468],[1613816400000,6.05560584],[1613816700000,6.05763716],[1613817000000,6.05775285],[1613817300000,6.08024562],[1613817600000,6.08751605],[1613817900000,6.08099173],[1613818200000,6.07934703],[1613818500000,6.0765554],[1613818800000,6.0863811],[1613819100000,6.08661419],[1613819400000,6.08598355],[1613819700000,6.07866519],[1613820000000,6.09086427],[1613820300000,6.11551507],[1613820600000,6.12132837],[1613820900000,6.11354188],[1613821200000,6.09591956],[1613821500000,6.07995371],[1613821800000,6.1031399],[1613822100000,6.1029065],[1613822400000,6.1364104],[1613822700000,6.17731214],[1613823000000,6.16797971],[1613823300000,6.20720863],[1613823600000,6.1951261],[1613823900000,6.20640262],[1613824200000,6.21493653],[1613824500000,6.22305828],[1613824800000,6.22209429],[1613825100000,6.26414783],[1613825400000,6.25050338],[1613825700000,6.24457703],[1613826000000,6.23984226],[1613826300000,6.23171244],[1613826600000,6.22190308],[1613826900000,6.23259141],[1613827200000,6.21753825],[1613827500000,6.23397908],[1613827800000,6.24012327],[1613828100000,6.26010689],[1613828400000,6.25339631],[1613828700000,6.24987927],[1613829000000,6.24148529],[1613829300000,6.23889211],[1613829600000,6.23932053],[1613829900000,6.23697221],[1613830200000,6.24969084],[1613830500000,6.24505717],[1613830800000,6.19313057],[1613831100000,6.22188007],[1613831400000,6.20840288],[1613831700000,6.20889027],[1613832000000,6.21796898],[1613832300000,6.22616104],[1613832600000,6.21771836],[1613832900000,6.08281586],[1613833200000,5.9833317],[1613833500000,5.99860616],[1613833800000,6.00686017],[1613834100000,6.01296744],[1613834400000,5.98520412],[1613834700000,5.95397597],[1613835000000,5.95425132],[1613835300000,5.93375386],[1613835600000,5.9195715],[1613835900000,5.90084876],[1613836200000,5.91488132],[1613836500000,5.92293582],[1613836800000,5.92928372],[1613837100000,5.98566927],[1613837400000,5.98836317],[1613837700000,6.03879542],[1613838000000,6.05899273],[1613838300000,6.04881621],[1613838600000,6.00822058],[1613838900000,6.00780629],[1613839200000,6.05305266],[1613839500000,6.02280094],[1613839800000,6.04026825],[1613840100000,6.03746324],[1613840400000,6.04520789],[1613840700000,6.07810669],[1613841000000,6.0586593],[1613841300000,6.10092505],[1613841600000,6.07506367],[1613841900000,6.08975548],[1613842200000,6.08166805],[1613842500000,6.08932866],[1613842800000,6.07510585],[1613843100000,6.11356013],[1613843400000,6.14204476],[1613843700000,6.10642991],[1613844000000,6.1218926],[1613844300000,6.1407055],[1613844600000,6.13456569],[1613844900000,6.13757363],[1613845200000,6.13663167],[1613845500000,6.1296738],[1613845800000,6.12722301],[1613846100000,6.13554326],[1613846400000,6.13301751],[1613846700000,6.10424593],[1613847000000,6.09285459],[1613847300000,6.11052097],[1613847600000,6.08384915],[1613847900000,6.09211994],[1613848200000,6.08544236],[1613848500000,6.09215236],[1613848800000,6.0816072],[1613849100000,5.99776684],[1613849400000,6.03903501],[1613849700000,6.03235842],[1613850000000,6.07973751],[1613850300000,6.06708239],[1613850600000,6.13418229],[1613850900000,6.0669675],[1613851200000,6.04279544],[1613851500000,5.99919268],[1613851800000,5.99722396],[1613852100000,5.98576762],[1613852400000,5.97078434],[1613852700000,6.00478778],[1613853000000,6.03254223],[1613853300000,6.07013413],[1613853600000,6.07901457],[1613853900000,5.99522025],[1613854200000,6.04300944],[1613854500000,5.9857746],[1613854800000,5.9934967],[1613855100000,6.0198242],[1613855400000,5.98313388],[1613855700000,5.98906518],[1613856000000,5.96524664],[1613856300000,6.00670037],[1613856600000,6.03495862],[1613856900000,6.05398143],[1613857200000,6.04770526],[1613857500000,6.06916317],[1613857800000,6.01289966],[1613858100000,6.03227902],[1613858400000,5.99155164],[1613858700000,5.97587021],[1613859000000,5.94519262],[1613859300000,5.94230721],[1613859600000,5.9335992],[1613859900000,5.94637892],[1613860200000,5.92956556],[1613860500000,5.90065338],[1613860800000,5.84149226],[1613861100000,5.61739889],[1613861400000,5.65799296],[1613861700000,5.63293775],[1613862000000,5.61955306],[1613862300000,5.67811335],[1613862600000,5.69346806],[1613862900000,5.7142686],[1613863200000,5.69059537],[1613863500000,5.71829214],[1613863800000,5.72673651],[1613864100000,5.67978275],[1613864400000,5.70521336],[1613864700000,5.68353022],[1613865000000,5.74799375],[1613865300000,5.87043531],[1613865600000,5.87490751],[1613865900000,7.31317016],[1613866200000,8.41165823],[1613866500000,8.34777083],[1613866800000,8.1395423],[1613867100000,7.31600407],[1613867400000,7.81287519],[1613867700000,8.20924068],[1613868000000,7.73251616],[1613868300000,8.13556271],[1613868600000,8.55957893],[1613868900000,10.29127055],[1613869200000,10.23112074],[1613869500000,11.3512936],[1613869800000,12.30959829],[1613870100000,12.89694841],[1613870400000,13.75947454],[1613870700000,13.83377182],[1613871000000,17.14118437],[1613871300000,14.44617363],[1613871600000,14.03474873],[1613871900000,14.58980224],[1613872200000,15.12497829],[1613872500000,15.5696764],[1613872800000,19.28276901],[1613873100000,17.3493337],[1613873400000,16.679777],[1613873700000,17.58951874],[1613874000000,15.52085313],[1613874300000,18.12081465],[1613874600000,19.35270664],[1613874900000,19.01483212],[1613875200000,18.91857019],[1613875500000,18.04579983],[1613875800000,15.91479877],[1613876100000,15.52743233],[1613876400000,18.24639963],[1613876700000,18.00781613],[1613877000000,17.94096468],[1613877300000,17.90051801],[1613877600000,17.19169906],[1613877900000,16.10464993],[1613878200000,17.10525939],[1613878500000,18.07110404],[1613878800000,18.60062022],[1613879100000,19.29050854],[1613879400000,19.78808969],[1613879700000,20.63608359],[1613880000000,20.45059106],[1613880300000,20.52263341],[1613880600000,19.27126636],[1613880900000,18.2519515],[1613881200000,17.81847687],[1613881500000,18.02600115],[1613881800000,16.97614188],[1613882100000,18.67969037],[1613882400000,17.92101675],[1613882700000,17.8463073],[1613883000000,17.48210876],[1613883300000,18.67897653],[1613883600000,18.3533032],[1613883900000,18.35903303],[1613884200000,18.12378994],[1613884500000,18.82410649],[1613884800000,18.95501988],[1613885100000,18.59726199],[1613885400000,18.54726841],[1613885700000,18.56179939],[1613886000000,18.69980111],[1613886300000,17.90452075],[1613886600000,17.72340016],[1613886900000,17.48649687],[1613887200000,17.37656523],[1613887500000,17.64682563],[1613887800000,17.20648481],[1613888100000,17.02568843],[1613888400000,16.98056005],[1613888700000,16.60200159],[1613889000000,16.611928],[1613889300000,16.91598565],[1613889600000,17.80995839],[1613889900000,16.90088254],[1613890200000,16.77500539],[1613890500000,17.06369742],[1613890800000,17.41895882],[1613891100000,16.33937269],[1613891400000,15.39265216],[1613891614625,15.56899195]];
var configuration = {
    type: 'line',
     data: {
        datasets: [{
            label: 'CHRT - Chart.js Corporation',
            backgroundColor: '#ffffff', //color(window.chartColors.red).alpha(0.5).rgbString(),
            borderColor: '#ff413d',
            data: data.map(([t,y]) => ({t, y})),
            type: 'line',
            pointRadius: 0,
            fill: false,
            lineTension: 0,
            borderWidth: 2
        }]
    },
    options: {
        animation: {
            duration: 0
        },
        scales: {
            xAxes: [{
                type: 'time',
                distribution: 'series',
                offset: true,
                ticks: {
                    display: true,
                    major: {
                        enabled: true,
                        fontStyle: 'bold'
                    },
                    source: 'data',
                    autoSkip: true,
                    autoSkipPadding: 75,
                    maxRotation: 0,
                    sampleSize: 100,
                },
                afterBuildTicks: function(scale, ticks) {
                    var majorUnit = scale._majorUnit;
                    var firstTick = ticks[0];
                    var i, ilen, val, tick, currMajor, lastMajor;

                    val = moment(ticks[0].value);
                    if ((majorUnit === 'minute' && val.second() === 0)
                            || (majorUnit === 'hour' && val.minute() === 0)
                            || (majorUnit === 'day' && val.hour() === 9)
                            || (majorUnit === 'month' && val.date() <= 3 && val.isoWeekday() === 1)
                            || (majorUnit === 'year' && val.month() === 0)) {
                        firstTick.major = true;
                    } else {
                        firstTick.major = false;
                    }
                    lastMajor = val.get(majorUnit);

                    for (i = 1, ilen = ticks.length; i < ilen; i++) {
                        tick = ticks[i];
                        val = moment(tick.value);
                        currMajor = val.get(majorUnit);
                        tick.major = currMajor !== lastMajor;
                        lastMajor = currMajor;
                    }
                    return ticks;
                }
            }],
            yAxes: [{
                ticks: {
                display: false,
                },
                gridLines: {
                    drawBorder: false
                },
                scaleLabel: {
                    display: false,
                    labelString: 'Closing price ($)'
                }
            }]
        },
        tooltips: {
            intersect: false,
            mode: 'index',
            callbacks: {
                label: function(tooltipItem, myData) {
                    var label = myData.datasets[tooltipItem.datasetIndex].label || '';
                    if (label) {
                        label += ': ';
                    }
                    label += parseFloat(tooltipItem.value).toFixed(2);
                    return label;
                }
            }
        }
    }
}


const mkChart = async (params) => {
    const canvasRenderService = new ChartJSNodeCanvas ({width: 1000, height: 400})
    return await canvasRenderService.renderToBuffer(configuration);
}

app.get('/chart', async function (req, res) {
    var image = await mkChart(req.query)
    res.type("image/png")
    res.send(image) 
})

app.listen(3061, () => {
    console.log('server is running.....')
})